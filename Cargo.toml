# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
[workspace]
members = ["crates/*"]
[workspace.package]
edition = "2024"
authors = ["TeamDman"]
repository = "https://github.com/AAFC-Cloud/Cloud-Terrastodon.git"
readme = "README.md"
license = "LiLiQ-R-1.1"
keywords = [
    "azure",
    "cli",
    "infrastructure",
    "automation",
    "devops",
    "cloud",
    "iac",
    "infrastructure-as-code",
    "cloud-automation",
    "cloud-infrastructure",
    "sdk",
]
categories = [
    "command-line-interface",
    "command-line-utilities",
    "api-bindings",
    "asynchronous",
    "parsing",
]

[workspace.dependencies]
anyhow = "1.0.82"
itertools = "0.14.0"
serde = { version = "1.0.197", features = ["derive"] }
serde_json = "1.0.116"
tokio = { version = "1.44.2", features = ["full"] }
tempfile = "3.10.1"
indicatif = "0.18.0"
async-recursion = "1.1.0"
indoc = "2.0.5"
hcl-rs = "0.19.4"
tracing = "0.1.40"
tracing-subscriber = { version = "0.3.18", features = ["env-filter", "json"] }
indexmap = { version = "2.2.6", features = ["serde"] }
ordermap = { version = "0.5.0", features = ["serde"] }
hcl-primitives = "0.1.5"
uuid = { version = "1.8.0", features = ["serde", "v4", "arbitrary"] }
chrono = { version = "0.4.38", features = ["serde", "arbitrary"] }
rand = "0.9.2"
test-log = { version = "0.2.16", features = ["trace"] }
clap = { version = "4.5.9", features = ["derive", "string"] }
iso8601-duration = { version = "0.2.0", features = ["serde", "chrono"] }
humantime = "2.1.0"
directories-next = "2.0.0"
ratatui = "0.29.0"
opener = "0.8.3"
emath = { version = "0.33.0", features = ["serde"] }
crossterm = { version = "0.28.1", features = ["event-stream"] }
futures = "0.3.31"
strum = { version = "0.27.2", features = ["derive"] }
quote = "1.0.37"
proc-macro2 = "1.0.89"
prettyplease = "0.2.25"
syn = { version = "2.0.106", default-features = false, features = [
    "full",
    "parsing",
    "printing",
] }
eyre = "0.6.12"
color-eyre = "0.6.3"
bstr = { version = "1.11.3", features = ["serde"] }
reqwest = { version = "0.12.22", features = ["json"] }
base64 = "0.22.1"
async-trait = "0.1.88"
compact_str = { version = "0.9.0", features = ["arbitrary"] }
regex = "1.11.1"
arbitrary = { version = "1.4.1", features = ["derive"] }
unicode_categories = "0.1.1"
ipnetwork = { version = "0.21.1", features = ["serde"] }
nucleo = "0.5.0"
tui-textarea = "0.7.0"
rustc-hash = "2.1.1"
jsonwebtoken = { version = "10.0.0", features = ["rust_crypto"] }

[workspace.dependencies.cloud_terrastodon_pathing]
version = "0.28.0"        # CT_VERSION
path = "./crates/pathing"

[workspace.dependencies.cloud_terrastodon_config]
version = "0.28.0"       # CT_VERSION
path = "./crates/config"

[workspace.dependencies.cloud_terrastodon_azure]
version = "0.28.0"      # CT_VERSION
path = "./crates/azure"

[workspace.dependencies.cloud_terrastodon_azure_types]
version = "0.28.0"            # CT_VERSION
path = "./crates/azure_types"

[workspace.dependencies.cloud_terrastodon_azure_resource_types]
version = "0.28.0"                     # CT_VERSION
path = "./crates/azure_resource_types"

[workspace.dependencies.cloud_terrastodon_azure_devops]
version = "0.28.0"             # CT_VERSION
path = "./crates/azure_devops"

[workspace.dependencies.cloud_terrastodon_azure_devops_types]
version = "0.28.0"                   # CT_VERSION
path = "./crates/azure_devops_types"

[workspace.dependencies.cloud_terrastodon_hcl]
version = "0.28.0"    # CT_VERSION
path = "./crates/hcl"

[workspace.dependencies.cloud_terrastodon_hcl_types]
version = "0.28.0"          # CT_VERSION
path = "./crates/hcl_types"

[workspace.dependencies.cloud_terrastodon_user_input]
version = "0.28.0"           # CT_VERSION
path = "./crates/user_input"

[workspace.dependencies.cloud_terrastodon_command]
version = "0.28.0"        # CT_VERSION
path = "./crates/command"

[workspace.dependencies.cloud_terrastodon_entrypoint]
version = "0.28.0"           # CT_VERSION
path = "./crates/entrypoint"

[workspace.dependencies.cloud_terrastodon_zombies]
version = "0.28.0"        # CT_VERSION
path = "./crates/zombies"

[workspace.dependencies.cloud_terrastodon_relative_location]
version = "0.28.0"                  # CT_VERSION
path = "./crates/relative_location"

[workspace.dependencies.cloud_terrastodon_ui_ratatui]
version = "0.28.0"           # CT_VERSION
path = "./crates/ui_ratatui"

[workspace.dependencies.cloud_terrastodon_ui_egui]
version = "0.28.0"        # CT_VERSION
path = "./crates/ui_egui"

[workspace.dependencies.cloud_terrastodon_credentials]
version = "0.28.0"            # CT_VERSION
path = "./crates/credentials"


[package]
name = "cloud_terrastodon"
version = "0.28.0"                                                        # CT_VERSION
description = "A command-line tool for interacting with cloud ecosystems"
readme.workspace = true
edition.workspace = true
authors.workspace = true
repository.workspace = true
license.workspace = true
keywords.workspace = true
categories.workspace = true

[build-dependencies]
embed-resource = "3.0.6"

[dependencies]
# Make the entrypoint optional behind a feature so library users don't pull it in by default
cloud_terrastodon_entrypoint = { workspace = true, optional = true }
tokio = { workspace = true }
eyre = { workspace = true }
color-eyre = { workspace = true }

# Optional re-exported crates (enable via features below)
cloud_terrastodon_pathing = { workspace = true, optional = true }
cloud_terrastodon_config = { workspace = true, optional = true }
cloud_terrastodon_azure = { workspace = true, optional = true }
cloud_terrastodon_azure_types = { workspace = true, optional = true }
cloud_terrastodon_azure_resource_types = { workspace = true, optional = true }
cloud_terrastodon_azure_devops = { workspace = true, optional = true }
cloud_terrastodon_azure_devops_types = { workspace = true, optional = true }
cloud_terrastodon_hcl = { workspace = true, optional = true }
cloud_terrastodon_hcl_types = { workspace = true, optional = true }
cloud_terrastodon_user_input = { workspace = true, optional = true }
cloud_terrastodon_command = { workspace = true, optional = true }
cloud_terrastodon_zombies = { workspace = true, optional = true }
cloud_terrastodon_relative_location = { workspace = true, optional = true }
cloud_terrastodon_ui_ratatui = { workspace = true, optional = true }
cloud_terrastodon_ui_egui = { workspace = true, optional = true }
cloud_terrastodon_credentials = { workspace = true, optional = true }

[features]
default = ["full"]
# Feature to enable the binary entrypoint wiring
entrypoint = ["dep:cloud_terrastodon_entrypoint"]
# One feature per optional subcrate. Each maps to its dependency via the `dep:` syntax.
pathing = ["dep:cloud_terrastodon_pathing"]
config = ["dep:cloud_terrastodon_config"]
azure = ["dep:cloud_terrastodon_azure"]
azure-types = ["dep:cloud_terrastodon_azure_types"]
azure-resource-types = ["dep:cloud_terrastodon_azure_resource_types"]
azure-devops = ["dep:cloud_terrastodon_azure_devops"]
azure-devops-types = ["dep:cloud_terrastodon_azure_devops_types"]
hcl = ["dep:cloud_terrastodon_hcl"]
hcl-types = ["dep:cloud_terrastodon_hcl_types"]
user-input = ["dep:cloud_terrastodon_user_input"]
command = ["dep:cloud_terrastodon_command"]
zombies = ["dep:cloud_terrastodon_zombies"]
relative-location = ["dep:cloud_terrastodon_relative_location"]
ui-ratatui = ["dep:cloud_terrastodon_ui_ratatui"]
ui-egui = ["dep:cloud_terrastodon_ui_egui"]
credentials = ["dep:cloud_terrastodon_credentials"]

# Convenience feature that enables all re-exports, similar to tokio's `full`.
full = [
    "pathing",
    "config",
    "azure",
    "azure-types",
    "azure-resource-types",
    "azure-devops",
    "azure-devops-types",
    "entrypoint",
    "hcl",
    "hcl-types",
    "user-input",
    "command",
    "zombies",
    "relative-location",
    "ui-ratatui",
    "ui-egui",
    "credentials",
]

[[bin]]
name = "cloud_terrastodon"
path = "src/main.rs"
# Ensure the binary is only built when the 'entrypoint' feature is enabled
required-features = ["entrypoint"]


# https://microsoft.github.io/rust-guidelines/guidelines/universal/index.html
[lints.rust]
ambiguous_negative_literals = "warn"
missing_debug_implementations = "warn"
redundant_imports = "warn"
redundant_lifetimes = "warn"
trivial_numeric_casts = "warn"
unsafe_op_in_unsafe_fn = "warn"
unused_lifetimes = "warn"

[lints.clippy]
cargo = { level = "warn", priority = -1 }
complexity = { level = "warn", priority = -1 }
correctness = { level = "warn", priority = -1 }
pedantic = { level = "warn", priority = -1 }
perf = { level = "warn", priority = -1 }
style = { level = "warn", priority = -1 }
suspicious = { level = "warn", priority = -1 }
# nursery = { level = "warn", priority = -1 }  # optional, might cause more false positives

# These lints are from the `restriction` lint group and prevent specific
# constructs being used in source code in order to drive up consistency,
# quality, and brevity
allow_attributes_without_reason = "warn"
as_pointer_underscore = "warn"
assertions_on_result_states = "warn"
clone_on_ref_ptr = "warn"
deref_by_slicing = "warn"
disallowed_script_idents = "warn"
empty_drop = "warn"
empty_enum_variants_with_brackets = "warn"
empty_structs_with_brackets = "warn"
fn_to_numeric_cast_any = "warn"
if_then_some_else_none = "warn"
map_err_ignore = "warn"
redundant_type_annotations = "warn"
renamed_function_params = "warn"
semicolon_outside_block = "warn"
undocumented_unsafe_blocks = "warn"
unnecessary_safety_comment = "warn"
unnecessary_safety_doc = "warn"
unneeded_field_pattern = "warn"
unused_result_ok = "warn"
